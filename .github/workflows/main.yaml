# name: main
#
# on:
#   push:
#     branches:
#       - main
# env:
#   TEST: "ubuntu-latest"
#
# permissions:
#   packages: write
#   contents: read
#
# jobs:
#   build1:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Generate Changelog
#         run: echo "# Good things have arrived" > ${{ github.workspace }}-CHANGELOG.txt
#       - name: Release
#         if: startsWith(github.ref, 'refs/tags/')
#         uses: softprops/action-gh-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           generate_release_notes: true
#           files: |
#             ${{ github.workspace }}-CHANGELOG.txt
#   output-variable: # 让build4传递环境变量必要的操作！！！
#     runs-on: ubuntu-latest
#     outputs:
#       test: ${{ steps.output_variables.outputs.test }}
#       # aaa: ${{ steps.output_variables.outputs.aaa }}
#       # tessst: ${{ steps.output_variables.outputs.tessst }}
#
# name: Main
#
# on: push
# # permissions:
# #   contents: write
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Build
#         run: echo ${{ github.sha }} > Release.txt
#       - name: Test
#         run: cat Release.txt
#       - name: Release
#         uses: softprops/action-gh-release@v1
#         if: startsWith(github.ref, 'refs/tags/')
#         with:
#           token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
#           files: Release.txt
#           generate_release_notes: true
# name: Main
#
# on:
#   push:
#     tags:
#       - "v*.*.*"
#
# jobs:
#   auto-generate-release-notes:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Release
#         uses: softprops/action-gh-release@v1
#         if: startsWith(github.ref, 'refs/tags/')
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           generate_release_notes: true
#
  # save-release-notes-to-file:
    # needs: auto-generate-release-notes
    # uses: ./.github/workflows/call-save-release-notes.yaml
    # secrets: inherit
    # steps:
    #   - uses: actions/checkout@v3
    #     with:
    #       fetch-depth: 0
    #
    #   - name: set environment variable
    #     run: |
    #       AAAAAAA="我是A"
    #       export BBBBBBB="我是B"
    #       echo "CCCCCCC=${AAAAAAA,,}" >> ${GITHUB_ENV} # 由于每个job的文件系统都是独立的，本job产生的env没法被其他job使用
#       - name: output environment variable
#         id: output_variables
#         run: |
#           echo $AAAAAAA
#           echo $BBBBBBB
#           echo ${{ env.CCCCCCC }}

#           # export REGISTRY=ghcr.io
#           # export REPO=kubean-io
#           # export IMAGE_TAG=latest
#           # export SPRAY_IMAGE_TAG_SHORT_SHA=latest
#           # make security-scanning
#           #
#           # wget https://github.com/aquasecurity/trivy/releases/download/v0.29.0/trivy_0.29.0_Linux-64bit.tar.gz
#           # tar xf trivy_0.29.0_Linux-64bit.tar.gz
#           # mv trivy /usr/local/bin/trivy
#           # trivy -v
#           # echo "AAA=我是变量内容" >> ${GITHUB_ENV}
#           # echo "===============输出变量内容：${{ env.AAA }}"
#           # echo ::set-output name=aaa::${AAA}
#           # echo ::set-output name=test::${{ env.TEST }}

#           # echo ::set-output name=tessst::${{ env.TESSST }}
#           # AAA="我是变量"


#           echo "test=${AAA}" >> $GITHUB_OUTPUT


      # kube_version:
      #   required: true
      #   type: string
      #   default: "kubean-io"
      # calico_version:
      #   required: true
      #   type: string
      #   default: "linux/amd64,linux/arm64"
      # cni_version:
      #   required: true
      #   type: string
      #   default: "ghcr.io"
      # containerd_version:
      #   required: true
      #   type: string
      #   default: "linux/amd64,linux/arm64"
      # cilium_version:
      #   required: true
      #   type: string
      #   default: "ghcr.io"
      # etcd_version:
      #   required: true
      #   type: string
      #   default: "linux/amd64,linux/arm64"
# permissions:
#   contents: write
name: Main

on:
  workflow_dispatch:
    inputs:
      file_suffix:
        required: true
        type: string
        default: "add_etcd_version"
      image_arch:
        required: false
        type: string
        default: "amd64 arm64"
      kube_version:
        required: false
        type: string
        default: "v1.24.6 v1.24.4"
      calico_version:
        required: false
        type: string
        default: "v3.23.3"
      cni_version:
        required: false
        type: string
        default: "v1.1.1"
      containerd_version:
        required: false
        type: string
        default: "1.6.8"
      cilium_version:
        required: false
        type: string
        default: "v1.12.1"
      etcd_version:
        required: false
        type: string
        default: "v3.5.3"
jobs:
  incremental-pachages:
    # needs: output-variable
    runs-on: self-hosted
    steps:
      - name: Generate incremental offline packages
        run: |
          # clear cache
          rm -rf *

          cat > manifest.yml << EOF
          image_arch:
          kube_version:
          calico_version:
          cni_version:
          containerd_version:
          cilium_version:
          etcd_version:
          EOF

          cat manifest.yml

          if [ -n "${{ inputs.image_arch }}" ]; then
            a=0
            for i in ${{ inputs.image_arch }}
            do
              export i
              yq -i ".image_arch[${a}]=env(i)" manifest.yml
              let a=a+1
            done
          fi

          if [ -n "${{ inputs.kube_version }}" ]; then
            a=0
            for i in ${{ inputs.kube_version }}
            do
              export i
              yq -i ".kube_version[${a}]=env(i)" manifest.yml
              let a=a+1
            done
          fi

          if [ -n "${{ inputs.calico_version }}" ]; then
            a=0
            for i in ${{ inputs.calico_version }}
            do
              export i
              yq -i ".calico_version[${a}]=env(i)" manifest.yml
              let a=a+1
            done
          fi

          if [ -n "${{ inputs.cni_version }}" ]; then
            a=0
            for i in ${{ inputs.cni_version }}
            do
              export i
              yq -i ".cni_version[${a}]=env(i)" manifest.yml
              let a=a+1
            done
          fi

          if [ -n "${{ inputs.containerd_version }}" ]; then
            a=0
            for i in ${{ inputs.containerd_version }}
            do
              export i
              yq -i ".containerd_version[${a}]=env(i)" manifest.yml
              let a=a+1
            done
          fi

          if [ -n "${{ inputs.cilium_version }}" ]; then
            a=0
            for i in ${{ inputs.cilium_version }}
            do
              export i
              yq -i ".cilium_version[${a}]=env(i)" manifest.yml
              let a=a+1
            done
          fi

          if [ -n "${{ inputs.etcd_version }}" ]; then
            a=0
            for i in ${{ inputs.etcd_version }}
            do
              export i
              yq -i ".etcd_version[${a}]=env(i)" manifest.yml
              let a=a+1
            done
          fi

          if (($(cat manifest.yml) == 7 ));then
            echo "There are no updates"
            exit
          fi

          docker run -v $(pwd)/manifest.yml:/manifest.yml -v $(pwd)/data:/data ghcr.io/hangscer8/airgap-patch:v0.2.0

          DATE=$(date "+%Y-%m-%d")
          mv manifest.yml manifest-${DATE}.yml
          tar zcvf kubean-incremental-${DATE}.tar.gz $(pwd)/data
          sha512sum kubean-incremental-${DATE}.tar.gz > kubean-incremental-${DATE}-checksum.txt

          OFFLINE_NGINX_IP=${{ secrets.OFFLINE_NGINX_IP }}
          OFFLINE_NGINX_PASSWORD=${{ secrets.OFFLINE_NGINX_PASSWORD }}
          FILE_SUFFIX=${{ inputs.file_suffix }}

          sshpass -p ${OFFLINE_NGINX_PASSWORD} scp -rp kubean-incremental-${DATE}-${FILE_SUFFIX}-checksum.txt root@${OFFLINE_NGINX_IP}:/root/release-2.19-offline/offline-files/kubean-incremental-package/ && \
          echo "Success Upload checksum file to intranet nginx"
          sshpass -p ${OFFLINE_NGINX_PASSWORD} scp -rp kubean-incremental-${DATE}-${FILE_SUFFIX}.tar.gz root@${OFFLINE_NGINX_IP}:/root/release-2.19-offline/offline-files/kubean-incremental-package/ && \
          echo "Success Upload incremental offline package to intranet nginx"
          sshpass -p ${OFFLINE_NGINX_PASSWORD} scp -rp manifest-${DATE}-${FILE_SUFFIX}.yml root@${OFFLINE_NGINX_IP}:/root/release-2.19-offline/offline-files/kubean-incremental-package/ && \
          echo "Success Upload incremental offline manifest to intranet nginx"

#   build2:
#     needs: [build1,output-variable]
#     uses: ./.github/workflows/call-test1.yaml
#     secrets: inherit
#     with:
#       TEST1: ${{ needs.output-variable.outputs.test }} # 传递环境到同目录其他CI文件
#       AAA: ${{ needs.output-variable.outputs.aaa }}
